********************************************************* 
AVA: cursos.alura.com.br
Formação: Node.js com Express
Curso: NodeJS: Stream de dados e Repositório
Data Início: 19/02/2021
*********************************************************
 
Capítulo 01: Stream de dados
#createReadStream, #createWriteStream, #pipe, #onEvent, #eventLoop

1. Criamos o script executado diretamente pelo node:
        @see arquivos\uploadDeArquivos.js
        >node .\arquivos\uploadDeArquivos.js

Capítulo 02: Manipulação de arquivos
#migrations, #validation, #connection, #query, #route, #expressGet, #expressPost, #expressPatch, 
#expressDelete 

1. Criamos a migration para criar a nova tabela de Pets, executando-a em seguida:
        >db-migrate create createTablePets --sql-file
        @see migrations\sqls\20210220152726-createTablePets-up.sql
        >db-migrate up
2. Criamos o model / controller e a validation CRUD para os Pets:
        @see controllers\pets.js
        @see models\pet.js
        @see models\pet-validation.js
3. Criamos uma função de upload de arquivos:
        @see arquivos\upload.js
4. Ajustamos o metodo "adiciona" do modelo Pet:
        @see models\pet.js

Capítulo 03: Serviços
#async, #await, #axios

1. Criamos um novo projeto em:
        @see D:\wamp64\www\alura\api-rest-nodejs2
2. Instalamos o axios (cliente HTTP):
        >npm install axios
3. Criamos a migration de alteração da tabela "atendimentos":
        >db-migrate create alterTableAtendimentosForCPF --sql-file
   ...modificamos os arquivos: 
        @see migrations\sqls\20210222131758-alterTableAtendimentosForCPF-up.sql
        @see migrations\sqls\20210222131758-alterTableAtendimentosForCPF-down.sql
   ...e executamos:
        >db-migrate up
4. Modificamos o método buscaPorId do modelo Atendimento pra incluir o objeto cliente que é consultado
   via axios pela app:
        @see models\atendimento.js

Capítulo 04: Repositórios
#promisse, #reject, #resolve

1. Criamos a pasta:
        @see repo
2. Movemos a pasta de arquivos para infra:
        @see infra
3. Criamos uma função tipo "Promisse" que define o comportamento comum de uma "query":
        @see infra\database\queries.js
   
Capítulo 05: Separando responsabilidades
#repository, #promisse, #promisseThen, #promisseCatch 

1. Criamos o:
        @see repo\atendimento.js
   Que é responsável pela a camada de "persistência de dados", desacoplando esta responsabilidade 
   do "modelo de negócio";
2. Refatoramos todos os métodos do controller, fazendo com que este só cuide da requisições e respostas, 
   e os métodos do modelo, fazendo com que estes só realizem as transformações de modelo de negócio:
        @see repo\atendimento.js
        @see models\atendimento.js
        @see controllers\atendimentos.js
        @see infra\database\queries.js